@import '../../prefrix';
@import 'breakpoints';

//FIXME: Remove this, debug
.outside {
  height: 80px;
  background-color:#ecd8d8;
  outline: 1px solid #4c0808;
}



@mixin grid-container($prefix) {
  #{$prefix}-container {
    margin-left: auto;
    margin-right: auto;
    width: 100%;
    max-width: 198rem;

    //FIXME: Remove this, debug
    font-size: 16px;
    background-color:#ef5252;
  }

}

@mixin grid-row($prefix) {
  #{$prefix}-row {
    display:flex;
    flex-wrap: wrap;

    //FIXME: Remove this, debug
    background-color: white;
    outline: 1px dashed blue;
  }
}

@mixin grid-container-breakpoints($prefix, $breakpoints) {

  @each $key, $values in $breakpoints {

    $breakpoint-margin: map-get($values, 'margin');
    $breakpoint-width: map-get($values, 'width');

    @media (min-width:  $breakpoint-width ) {
        #{$prefix}-container {
            padding-right: $breakpoint-margin;
            padding-left: $breakpoint-margin;
        }
    }
  }
}

@mixin grid-col-sizes($breakpoints) {

  // Size
  @each $sizes, $values in $breakpoints {
     $breakpoint-columns: map-get($values, 'columns');
     $breakpoint-size: map-get($values, 'size');
     $breakpoint-gutter: map-get($values, 'gutter');
     $breakpoint-padding: map-get($values, 'padding');
     $breakpoint-width: map-get($values, 'width');

    //  Each column for everysize
    @for $i from 1 through $breakpoint-columns {

      #{$prefix}-col-#{$sizes}-#{$i} {
        display: block;
        flex-grow: 0;
        flex-shrink: 0;
        flex-basis: 100%;
        max-width: 100%;
      }

      @media (min-width:  $breakpoint-width ) {
        #{$prefix}-col-#{$sizes}-#{$i} {
          @include grid-col-size($breakpoint-size, $i);
          @include grid-col-padding($breakpoint-padding);
          @include grid-gutters($breakpoint-gutter);

          //FIXME: Remove this, debug
          background-color: #ffafaf;
          outline: 1px solid red;

        }
      }
    }
  }
}

@mixin grid-col-padding($padding) {
  padding: 0 $padding;
}

@mixin grid-col-size($size, $i) {
  
  display: block;
  flex-grow: 0;
  flex-shrink: 0;
  flex-basis: percentage($size * $i + 0.02083 * ($i - 1));
  max-width: percentage($size * $i + 0.02083 * ($i - 1) );
}

@mixin grid-gutters($gutter) {
  margin: 0 $gutter / 2;
}

//Gutterless col sizes
@mixin grid-gutterless-col($breakpoints) {

  // Size
  @each $sizes, $values in $breakpoints {
    $breakpoint-columns: map-get($values, 'columns');
    $breakpoint-size: map-get($values, 'size');
    $breakpoint-gutter: map-get($values, 'gutter');
    $breakpoint-padding: map-get($values, 'padding');
    $breakpoint-width: map-get($values, 'width');

   //  Each column for everysize
    @for $i from 1 through $breakpoint-columns {

      @media (min-width:  $breakpoint-width ) {
        #{$prefix}-col-#{$sizes}-#{$i}.gutterless {
          display: block;
          flex-grow: 0;
          flex-shrink: 0;
          flex-basis:  percentage($breakpoint-size * $i);
          max-width:  percentage($breakpoint-size * $i);
          padding: 0 $breakpoint-padding;
          margin: 0;

          //FIXME: Remove this, debug
          background-color: #ffafaf;
          outline: 1px solid red;
        }
      }
    }
  }
}